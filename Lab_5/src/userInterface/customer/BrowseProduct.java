/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.customer;

import Business.MasterOrderCatalog;
import Business.Order;
import Business.OrderItem;
import Business.Product;
import Business.Supplier;
import Business.SupplierDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Eric
 */
public class BrowseProduct extends javax.swing.JPanel {

    /**
     * Creates new form BrowseProduct
     */
    private JPanel processContainer;
    private SupplierDirectory supplierDirectory;
    private MasterOrderCatalog masterOrderCatalog;
    private Order order;
    private boolean isCheckedout = false;
    
    public BrowseProduct(JPanel processContainer , SupplierDirectory supplierDirectory , MasterOrderCatalog masterOrderCatalog) {
        initComponents();
        
        initComponents();
        
        this.processContainer = processContainer;
        this.supplierDirectory = supplierDirectory;
        this.masterOrderCatalog = masterOrderCatalog;
        
        populateSupplierCombo();
        
        if(!isCheckedout)
        
        order = new Order();
    }
    
    public void populateSupplierCombo(){
        suppComboBox1.removeAllItems();
        
        for(Supplier supplier : supplierDirectory.getSupplierDirectory()){
            suppComboBox1.addItem(supplier);
        }
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        dtm.setRowCount(0);
        
        Supplier supplier = (Supplier)suppComboBox1.getSelectedItem();
        
        for(Product product : supplier.getProductCatalog().getProductCatalog()){
            Object row[] = new Object[4];
            row[0] = product;
            row[1] = product.getModelNumber();
            row[2] = product.getPrice();
            row[3] = product.getAvail();
            dtm.addRow(row);
        }
    }
    
    public void refreshProductTable(String keyword){
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        dtm.setRowCount(0);
        
        for(Supplier supplier : supplierDirectory.getSupplierDirectory()){
            for(Product product : supplier.getProductCatalog().getProductCatalog()){
                if(product.getProductName().equalsIgnoreCase(keyword)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getModelNumber();
                    row[2] = product.getPrice();
                    row[3] = product.getAvail();
                    dtm.addRow(row);
                }
            }
        }
    }
    
    public void refreshOrderTable(){
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
        
        for(OrderItem oi : order.getOrderItemList()){
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getSalePrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getQuantity() * oi.getSalePrice();
            dtm.addRow(row);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 590, 100));

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });
        add(suppComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 250, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 240, -1));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 90, -1));

        viewProdjButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 160, -1));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 320, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 320, -1, -1));

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, -1, -1));

        jLabel6.setText("Sales Price");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, -1, -1));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 320, 40, -1));

        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 580, 110));

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });
        add(btnViewOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, -1, -1));

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 530, -1, -1));

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 530, -1, -1));

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 530, -1, -1));

        txtSearchKeyWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchKeyWordActionPerformed(evt);
            }
        });
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 110, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 530, 70, -1));

        jLabel3.setFont(new java.awt.Font("PingFang HK", 1, 24)); // NOI18N
        jLabel3.setText("Welcome to Please Buy");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        processContainer.remove(this);
        CardLayout layout = (CardLayout)processContainer.getLayout();
        layout.previous(processContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        if(selectedRow >= 0){
            Product product = (Product)productTable.getValueAt(selectedRow, 0);
            ProductDetailJPanel pdjp = new ProductDetailJPanel(processContainer , product);
            processContainer.add("CustomerProductDetailJPanel" , pdjp);
            CardLayout layout = (CardLayout)processContainer.getLayout();
            layout.next(processContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Product selectedProduct = (Product)productTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer)quantitySpinner.getValue();

        if(fetchQty <= 0){
            JOptionPane.showMessageDialog(null, "Quantity cannot be less than 1", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try{
            double salePrice = Double.parseDouble(txtSalesPrice.getText());
            if(salePrice <= selectedProduct.getPrice()){
                JOptionPane.showMessageDialog(null, "SalePrice cannot be less than actual Price", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(fetchQty <= selectedProduct.getAvail()){
                boolean alreadyPresent = false;
                for(OrderItem oi : order.getOrderItemList()){
                    if(oi.getProduct() == selectedProduct){
                        
                        int oldAvail = selectedProduct.getAvail();
                        int newAvail = oldAvail - fetchQty;
                        selectedProduct.setAvail(newAvail);
                        oi.setQuantity(fetchQty + oi.getQuantity());
                        
                        alreadyPresent = true;
                        populateTable();
                        refreshOrderTable();
                        break;
                    }
                }

                if(!alreadyPresent){
                    int oldAvail = selectedProduct.getAvail();
                    int newAvail = oldAvail - fetchQty;
                    selectedProduct.setAvail(newAvail);
                    order.addOrderItem(selectedProduct, fetchQty, salePrice);
                    populateTable();
                    refreshOrderTable();
                }
            }else{
                JOptionPane.showMessageDialog(null, "Quantity > Availibility", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid SalePrice", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String prodName = txtSearchKeyWord.getText();
        refreshProductTable(prodName);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        if(selectedRow >= 0){
            OrderItem oi = (OrderItem)orderTable.getValueAt(selectedRow, 0);
            OrderItemDetailJPanel oidjp = new OrderItemDetailJPanel(processContainer , oi);
            processContainer.add("CustomerOrderItemDetailJPanel" , oidjp);
            CardLayout layout = (CardLayout)processContainer.getLayout();
            layout.next(processContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItem oi = (OrderItem)orderTable.getValueAt(selectedRow, 0);
        int currentAvail = oi.getProduct().getAvail();
        int oldQty = oi.getQuantity();
        int newQty = Integer.parseInt(txtNewQuantity.getText());
        if(newQty > (currentAvail + oldQty)){
            JOptionPane.showMessageDialog(null, "Quantity is more than Availibility", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else{
            if(newQty <= 0){
                JOptionPane.showMessageDialog(null, "Quantity should be greater than 0", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            oi.setQuantity(newQty);
            oi.getProduct().setAvail(currentAvail + (oldQty - newQty));
            refreshOrderTable();
            populateTable();
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItem oi = (OrderItem)orderTable.getValueAt(selectedRow, 0);
        int oldAvail = oi.getProduct().getAvail();
        int oldQty = oi.getQuantity();
        int newQty = oldQty + oldAvail;
        oi.getProduct().setAvail(newQty);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "QrderItem Removed from Cart", "Information", JOptionPane.INFORMATION_MESSAGE);
        refreshOrderTable();
        populateTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if(order.getOrderItemList().size() > 0){
            masterOrderCatalog.addOrder(order);
            JOptionPane.showMessageDialog(null, "Order Placed successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            order = new Order();
            refreshOrderTable();
            populateTable();
            isCheckedout = true;
        }else{
            JOptionPane.showMessageDialog(null, "No Order Placed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void txtSearchKeyWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchKeyWordActionPerformed

    }//GEN-LAST:event_txtSearchKeyWordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
